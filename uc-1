package com.oakdalesoft.bootfaces.service;

import com.oakdalesoft.bootfaces.domain.User;
import com.oakdalesoft.bootfaces.persistence.UserRepository;
import com.oakdalesoft.bootfaces.util.CustomErrorType;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.ResponseEntity;
import org.springframework.http.HttpHeaders;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.ResponseBody;
import org.springframework.web.bind.annotation.RestController;
import org.springframework.web.util.UriComponentsBuilder;
import java.util.ArrayList;
import java.util.List;




@RestController
public class UserController {

    @Autowired
    private UserRepository userRepository;
    
 // -------------------Retrieve All Users---------------------------------------------
    
    @RequestMapping(value = "service/user/", method = RequestMethod.GET)
    public ResponseEntity<List<User>> listAllUsers() {
        List<User> users = userRepository.findAllUsers();
        if (users.isEmpty()) {
            return new ResponseEntity(HttpStatus.NO_CONTENT);
            // You many decide to return HttpStatus.NOT_FOUND
        }
        return new ResponseEntity<List<User>>(users, HttpStatus.OK);
    }
 
    // -------------------Retrieve Single User------------------------------------------
 
    @RequestMapping(value = "/service/user/{id}", method = RequestMethod.GET)
    public ResponseEntity<?> getUser(@PathVariable("id") long id) {
        //logger.info("Fetching User with id {}", id);
        User user = userRepository.findById(id);
        if (user == null) {
            //logger.error("User with id {} not found.", id);
            return new ResponseEntity(new CustomErrorType("User with id " + id 
                    + " not found"), HttpStatus.NOT_FOUND);
        }
        return new ResponseEntity<User>(user, HttpStatus.OK);
    }
 
    // -------------------Create a User-------------------------------------------
 
    @RequestMapping(value = "/service/user/", method = RequestMethod.POST)
    public ResponseEntity<?> createUser(@RequestBody User user, UriComponentsBuilder ucBuilder) {
        //logger.info("Creating User : {}", user);
 
        if (userRepository.isUserExist(user)) {
            //logger.error("Unable to create. A User with name {} already exist", user.getName());
            return new ResponseEntity(new CustomErrorType("Unable to create. A User with name " + 
            user.getIme() + " already exist."),HttpStatus.CONFLICT);
        }
        userRepository.saveUser(user);
 
        HttpHeaders headers = new HttpHeaders();
        headers.setLocation(ucBuilder.path("/api/user/{id}").buildAndExpand(user.getId()).toUri());
        return new ResponseEntity<String>(headers, HttpStatus.CREATED);
    }
 
    // ------------------- Update a User ------------------------------------------------
 
    @RequestMapping(value = "/service/user/{id}", method = RequestMethod.PUT)
    public ResponseEntity<?> updateUser(@PathVariable("id") long id, @RequestBody User user) {
        //logger.info("Updating User with id {}", id);
 
        User currentUser = userRepository.findById(id);
 
        if (currentUser == null) {
            //logger.error("Unable to update. User with id {} not found.", id);
            return new ResponseEntity(new CustomErrorType("Unable to upate. User with id " + id + " not found."),
                    HttpStatus.NOT_FOUND);
        }
        currentUser.setIme(user.getIme());
        currentUser.setMobilni(user.getMobilni());
        currentUser.setPoslovni(user.getPoslovni());
        currentUser.setMobilni(user.getMobilni());
        currentUser.setPoslovni(user.getPoslovni());
        userRepository.doUpdateUser(currentUser);
        return new ResponseEntity<User>(currentUser, HttpStatus.OK);
    }
 
    // ------------------- Delete a User-----------------------------------------
 
    @RequestMapping(value = "/service/user/{id}", method = RequestMethod.DELETE)
    public ResponseEntity<?> deleteUser(@PathVariable("id") long id) {
        //logger.info("Fetching & Deleting User with id {}", id);
 
        User user = userRepository.findById(id);
        if (user == null) {
            //logger.error("Unable to delete. User with id {} not found.", id);
            return new ResponseEntity(new CustomErrorType("Unable to delete. User with id " + id + " not found."),
                    HttpStatus.NOT_FOUND);
        }
        userRepository.deleteUserById(id);
        return new ResponseEntity<User>(HttpStatus.NO_CONTENT);
    }
 
    // ------------------- Delete All Users-----------------------------
 
    /*
    @RequestMapping(value = "/service/user/", method = RequestMethod.DELETE)
    public ResponseEntity<User> deleteAllUsers() {
        //logger.info("Deleting All Users");
 
        userRepository.deleteAllUsers();
        return new ResponseEntity<User>(HttpStatus.NO_CONTENT);
  
    
    
    }
	*/
};    


    